# Prompt: Global Refactoring and Feature Expansion Plan for Persona Simulation App (PySide6 + Ollama/Mistral)

You are a senior AI engineer and software architect with deep experience in:

- Multi-agent psychological modeling
- Desktop UI frameworks (especially PyQt / PySide6)
- Offline LLM orchestration (Mistral via Ollama)
- Human-computer interaction and UX design
- Software modularity, maintainability, and performance

You are auditing and upgrading a local desktop application that simulates conversations between virtual personas, each defined by psychological traits (e.g., Big Five, goals, motivations).

The app is written in **Python 3.10+** with a GUI in **PySide6 (Qt for Python)** and LLM integration via **Mistral served by Ollama**.

---

## Current Features (baseline to preserve and enhance)

- Personas created via GUI with psychological data
- Conversations simulated using Mistral (offline)
- One "main person" (omniscient agent) adapts over iterations to achieve a negotiation goal
- Other personas can have static or reactive goals
- GUI shows persona data, conversation history, and iteration loop
- JSON import/export for persona definitions
- App runs fully offline
- Includes predefined sample scenarios (negotiation, relationships, etc.)

---

## Your Task

Design a **comprehensive, intelligent improvement plan** across all dimensions of the application, including:

---

### 1. üß† Simulation Logic

- Support **goal hierarchies**, subgoals, or multi-agent plans
- Enable dynamic psychological trait evolution (e.g., openness increases with trust)
- Add configurable **memory** and **strategy layers** per persona (short-term vs long-term)
- Simulate belief, intention, and deception mechanisms
- Support simulation branching or alternate paths

---

### 2. üí¨ LLM Prompting & Conversation Engine

- Improve **prompt templating and injection** (traits, history, context, goals)
- Add persona "reflection" phases post-iteration (via prompting)
- Introduce a **meta-controller** module for simulation control logic (success criteria, loop control)
- Consider caching, incremental prompting, or prompt chaining
- Make it easy to switch between **chat** and **single-prompt** modes

---

### 3. üñº GUI / UX (PySide6)

- Modularize UI: use **Qt Designer** + code separation (MVC/MVVM style)
- Add tabs/panels for:
  - Persona creator/editor
  - Live conversation feed (with role-based colors/icons)
  - Goal progress tracker
  - Simulation config panel
- Implement:
  - Conversation tree visualizer (QGraphicsView)
  - Progress bars, logs, tooltips, undo history
  - "Run Simulation" wizard for sample scenarios
- Add light/dark theme toggle

---

### 4. üß± Architecture

- Refactor into clean package layout:
  - `core/`: simulation engine
  - `ui/`: Qt GUI logic
  - `llm/`: LLM I/O and prompts
  - `models/`: persona schemas, goal trees
  - `config/`: constants, templates
  - `data/`: examples
- Add **dependency injection** pattern for mockable LLM / GUI
- Support unit testing of logic modules
- Improve type hinting and interface segregation

---

### 5. ‚öôÔ∏è Extensibility

- Allow plugins (e.g., new psychological models, behaviors)
- Add a **"Headless Mode"** CLI version for simulations
- Prepare foundation for **voice input/output** or **web export**
- Allow persona packs or scenario packs to be imported easily
- Allow switching LLM backend: Ollama, LM Studio, llama.cpp

---

7. üõ† Deliverables

    Provide:

        ‚úÖ List of proposed improvements

        üß† Justifications (UX, performance, psychological realism, modularity)

        üõ† Suggested implementation order (by difficulty/impact)

        üß™ CI/test coverage improvements (optional)

    In a PROGRESS.MD file that you will edit everytime.

    Bonus: include roadmap for voice/speech, web integration, and extensible personas