# Mission Refactoring : Simplifier et Clarifier AutomaTeX

## Contexte de l'Application

AutomaTeX est un éditeur LaTeX intelligent conçu pour assister les rédacteurs, des étudiants aux chercheurs, en automatisant les tâches répétitives et en s'intégrant à des modèles de langage (LLM) pour la génération, la correction et la suggestion de contenu. Son but est de rendre l'écriture de documents scientifiques et techniques plus fluide et plus intuitive.

## Objectif Principal du Refactoring

L'objectif de cette mission est de restructurer l'ensemble de l'application pour la rendre **extrêmement simple, modulaire et facile à comprendre**. Après le refactoring, l'application devra fonctionner exactement comme avant, sans aucune perte de fonctionnalité. La priorité absolue est la **lisibilité** et la **maintenabilité** du code.

---

## Règles d'Or à Suivre Impérativement

### 1. Simplicité Radicale
Le code doit être si simple qu'un nouveau développeur puisse en comprendre le fonctionnement en quelques minutes. Évitez toute complexité superflue, les abstractions inutiles et le code "intelligent" difficile à lire. La clarté prime sur la concision.

### 2. Nommage Clair et Cohérent (en Anglais)
- **Tous les noms de fichiers, de variables, de fonctions et de classes doivent être en anglais.**
- Les noms doivent être descriptifs, sans ambiguïté et explicites.
- **Bon exemple :** `def create_main_application_window():`
- **Mauvais exemple :** `def init_ui():`

### 3. Modularité et Taille des Fichiers
- **Aucun fichier ne doit dépasser 400 lignes.** C'est une règle stricte. Si un fichier s'approche de cette limite, il est impératif de le décomposer.
- Pensez en termes de **sous-composants**. Chaque fonctionnalité ou partie de l'interface doit être isolée dans son propre module.
- Par exemple, le fichier `interface.py` doit être démantelé en plusieurs fichiers plus petits, chacun gérant une responsabilité unique (ex: `menu_bar.py`, `status_bar.py`, `editor_pane.py`).

### 4. Séparation Stricte des Responsabilités
- **Logique de l'interface (UI) :** Le code lié à `tkinter` ne doit gérer que l'affichage des widgets et la capture des actions de l'utilisateur. Il ne doit contenir aucune logique métier.
- **Logique métier (Core) :** La manipulation du texte, la compilation LaTeX, la gestion des fichiers, et les appels à l'LLM doivent être complètement indépendants de l'interface. Un module métier ne doit **jamais** importer `tkinter`.

### 5. Aucune Régression Fonctionnelle
L'application finale doit être identique à l'originale du point de vue de l'utilisateur. Testez chaque fonctionnalité après l'avoir refactorisée pour vous assurer que tout fonctionne comme prévu.

---

Ce refactoring est essentiel pour garantir que le projet AutomaTeX puisse évoluer de manière saine et accueillir de nouvelles fonctionnalités sans accumuler de dette technique.
